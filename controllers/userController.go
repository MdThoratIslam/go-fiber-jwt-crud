package controllers

// üëâ ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø controllers ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶õ‡ßá‡•§
import (
	"fmt"
	"github.com/gofiber/fiber/v2"
	"go-fiber-jwt-crud/BaseResponceForApi"
	"go-fiber-jwt-crud/database"
	logger "go-fiber-jwt-crud/log"
	"go-fiber-jwt-crud/models"
	"os"
	"strings"
	"time"
)

/*
üëâ ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶§‡ßá ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú ‡¶ì ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤ ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:
‚úÖ fmt ‚Üí ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
‚úÖ github.com/gofiber/fiber/v2 ‚Üí Fiber Framework ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
‚úÖ go-fiber-jwt-crud/database ‚Üí ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó (DB Connection)
‚úÖ logger "go-fiber-jwt-crud/log" ‚Üí ‡¶≤‡¶ó ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ
‚úÖ go-fiber-jwt-crud/models ‚Üí ‡¶Æ‡¶°‡ßá‡¶≤‡¶∏ (User Model)
‚úÖ os ‚Üí ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏
‚úÖ time ‚Üí ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ì ‡¶∏‡¶Æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ
*/

// Define a struct for response excluding password
type UserResponse struct {
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Address string `json:"address"`
	Gender  string `json:"gender"`
	Email   string `json:"email"`
	Age     int    `json:"age"`
}

/*
üëâ ‡¶è‡¶á struct (‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞) ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶æ‡¶ñ‡ßá ‡¶®‡¶æ‡•§
‚úÖ ‡¶è‡¶§‡ßá ‡¶®‡¶æ‡¶Æ, ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞, ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ, ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó, ‡¶á‡¶Æ‡ßá‡¶á‡¶≤, ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßü‡¶∏ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§
‚úÖ ‡¶è‡¶ü‡¶ø JSON ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§
*/
func GetUsers(c *fiber.Ctx) error {
	//üëâ GetUsers ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® Fiber Context (c *fiber.Ctx) ‡¶®‡ßá‡ßü ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡ßü‡•§
	/*
		üìå c *fiber.Ctx ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá?
		‚úÖ fiber.Ctx ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶®‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ø‡¶æ HTTP ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá‡•§
		‚úÖ ‡¶è‡¶ü‡¶ø Go Fiber ‡¶´‡ßç‡¶∞‡ßá‡¶Æ‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶≤‡ßç‡¶ü-‡¶á‡¶® ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞, ‡¶Ø‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø API ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡¶Ç‡¶≤‡¶ó‡ßç‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ì ‡¶Æ‡ßá‡¶•‡¶°‡¶∏ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§
		üìå ‡¶è‡¶ü‡¶ø ‡¶ï‡ßÄ ‡¶ï‡¶æ‡¶ú‡ßá ‡¶≤‡¶æ‡¶ó‡ßá?
		1Ô∏è‚É£ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ:
		    URL ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ (params) ‡¶®‡ßá‡¶ì‡ßü‡¶æ
		    ‡¶ï‡ßÅ‡ßü‡ßá‡¶∞‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç (query parameters) ‡¶™‡ßú‡¶æ
		    ‡¶¨‡¶°‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ (Body data) ‡¶™‡ßú‡¶æ
		2Ô∏è‚É£ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã:
		    JSON ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
		    ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶æ HTML ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
		    ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ

		3Ô∏è‚É£ ‡¶Æ‡¶ø‡¶°‡¶≤‡¶ì‡ßü‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ì ‡¶Ö‡¶•‡ßá‡¶®‡¶ü‡¶ø‡¶ï‡ßá‡¶∂‡¶®:
		    JWT ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®
		    ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶≤‡¶ó ‡¶ï‡¶∞‡¶æ
		    ‡¶∞‡ßÅ‡¶ü ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡ßá‡¶ï‡¶∂‡¶®
	*/
	var users []models.User
	// Fetch only selected columns
	result := database.DB.Select("id", "name", "email", "phone", "address", "age", "gender").Find(&users)

	/*
		‚úÖ database.DB.Select(...) ‚Üí ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶≤‡¶æ‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá
		‚úÖ Find(&users) ‚Üí ‡¶∏‡¶ï‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç users ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá‡•§
	*/

	// Check if no users found
	if len(users) == 0 {
		logger.Warn("No users found")
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error":   "No users found",
			"message": "No users available in the database",
		})
	}

	//‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá "‡¶ïNo users found" ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡•§

	// Check for database error
	if result.Error != nil {
		logger.Error("Failed to fetch users", result.Error)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error":   "Failed to fetch users",
			"details": result.Error.Error(),
		})
	}
	//‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø (error) ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§

	// Map users to response struct to exclude password
	//var userResponses []UserResponse
	//for _, user := range users {
	//	userResponses = append(userResponses, UserResponse{
	//		Name:    user.Name,
	//		Phone:   user.Phone,
	//		Address: user.Address,
	//		Gender:  user.Gender,
	//		Email:   user.Email,
	//		Age:     user.Age,
	//	})
	//}
	//‚úÖ ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø UserResponse ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

	apiResponse := BaseResponceForApi.ApiResponse{
		Message: "Users fetched successfully",
		Status:  "success",
	}

	// Create an array to hold user data
	var userData []map[string]interface{}

	for _, user := range users {
		userData = append(userData, map[string]interface{}{
			"Name":   user.Name,
			"Email":  user.Email,
			"Phone":  user.Phone,
			"Age":    user.Age,
			"Genger": user.Gender,
		})
	}
	// Assign user data to response
	apiResponse.Data = userData
	logger.Success("Users fetched successfully")
	return c.JSON(apiResponse)
	//return c.JSON(userResponses)
}
func GetUser(c *fiber.Ctx) error {
	id := c.Params("id")
	var user models.User
	database.DB.First(&user, id)
	/*
		‚úÖ c.Params("id") ‚Üí URL ‡¶•‡ßá‡¶ï‡ßá ID ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá
		‚úÖ database.DB.First(&user, id) ‚Üí ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡ßá‡•§
	*/
	if user.ID == 0 {
		logger.Warn("User not found")
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error":   "User not found",
			"message": "User does not exist in the database",
		})
	}
	logger.Success("User fetched successfully")
	apiResponse := BaseResponceForApi.ApiResponse{
		Message: "User fetched successfully",
		Status:  "success",
		Data: map[string]interface{}{
			"Name":   user.Name,
			"Email":  user.Email,
			"Phone":  user.Phone,
			"Age":    user.Age,
			"Genger": user.Gender,
		},
	}
	return c.JSON(apiResponse)
}

func UpdateUser(c *fiber.Ctx) error {
	id := c.Params("id")
	var user models.User
	database.DB.First(&user, id)

	if err := c.BodyParser(&user); err != nil {
		logger.Error("Failed to parse JSON", err)
		return err
	}
	//‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã JSON ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡•§

	database.DB.Save(&user)
	logger.Success("User updated successfully")
	apiResponse := BaseResponceForApi.ApiResponse{
		Message: "User updated successfully",
		Status:  "success",
		Data: map[string]interface{}{
			"Name":   user.Name,
			"Email":  user.Email,
			"Phone":  user.Phone,
			"Age":    user.Age,
			"Genger": user.Gender,
		},
	}
	return c.JSON(apiResponse)
}
func DeleteUser(c *fiber.Ctx) error {
	id := c.Params("id")
	database.DB.Delete(&models.User{}, id)
	if database.DB.Error != nil {
		logger.Error("Failed to delete user", database.DB.Error)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error":   "Failed to delete user",
			"details": database.DB.Error.Error(),
		})
	}
	logger.Success("User deleted successfully with ID: " + id)
	return c.SendString("User Deleted")
}
func GetLog(c *fiber.Ctx) error {
	date := c.Query("date", time.Now().Format("2006-01-02"))
	//‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§

	// ‚úÖ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶≤‡¶ó ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü)
	fileName := fmt.Sprintf("log/app/app_%s.log", date)
	logger.Success("Log file name set")
	// ‚úÖ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶≤‡¶ó ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ
	if _, err := os.Stat(fileName); os.IsNotExist(err) {
		fmt.Println("‚ùå Log file does not exist:", fileName)
		logger.Error("Log file not found", err)
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error":   "Log file not found",
			"file":    fileName,
			"message": "No logs available for today",
		})
	}
	// ‚úÖ ‡¶≤‡¶ó ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∞‡¶ø‡¶°
	data, err := os.ReadFile(fileName)
	if err != nil {
		fmt.Println("‚ùå Could not read log file:", err)
		logger.Error("Could not read log file", err)
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error":   "Could not read log file",
			"details": err.Error(),
		})
	}
	// ‚úÖ \n ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
	cleanedData := strings.ReplaceAll(string(data), "\n", "\n")

	// ‚úÖ JSON ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡¶ø‡¶®
	apiResponse := BaseResponceForApi.ApiResponse{
		Message: "Log data fetched successfully",
		Status:  "success",
		Data:    cleanedData,
	}
	// ‚úÖ ‡¶≤‡¶ó ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ï‡¶®‡¶∏‡ßã‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
	logger.Success("Log data fetched successfully")
	return c.JSON(apiResponse)
}
